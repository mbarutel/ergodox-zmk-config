#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1700
#define BASE 0
#define NAV 1
#define MOUSE 2
#define MEDIA 3
#define NUM 4
#define SYM 5
#define FUN 6

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    combos {
        compatible = "zmk,combos";

        // Left Side Combos
        /* combo_left_shift { */
        /*     timeout-ms = <30>; */
        /* key-positions = <32 31>; // D + S */
        /*     bindings = <&kp LSHFT>; */
        /*     layers = <0>; */
        /* };  */
        combo_left_ctrl {
            timeout-ms = <30>;
            key-positions = <33 32>; // F + D
            bindings = <&kp LCTRL>;
            layers = <0>;
        };
        /* combo_left_gui { */
        /*     timeout-ms = <30>; */
        /*     key-positions = <33 31>; // A + F */
        /*     bindings = <&kp LGUI>; */
        /*     layers = <0>; */
        /* }; */
        /* combo_left_alt { */
        /*     timeout-ms = <30>; */
        /*     key-positions = <31 30>; // A + S */
        /*     bindings = <&kp LALT>; */
        /*     layers = <0>; */
        /* };  */

        // Right Side Combos
        /* combo_right_shift { */
        /*     timeout-ms = <30>; */
        /*     key-positions = <37 38>; // K + L */
        /*     bindings = <&kp RSHFT>; */
        /*     layers = <0>; */
        /* }; */
        combo_right_ctrl {
            timeout-ms = <30>;
            key-positions = <36 37>; // J + K
            bindings = <&kp RCTRL>;
            layers = <0>;
        };
        /* combo_right_gui { */
        /*     timeout-ms = <30>; */
        /*     key-positions = <36 38>; // J + L */
        /*     bindings = <&kp RGUI>; */
        /*     layers = <0>; */
        /* }; */
        /* combo_right_alt { */
        /*     timeout-ms = <30>; */
        /*     key-positions = <38 39>; // L + ; */
        /*     bindings = <&kp RALT>; */
        /*     layers = <0>; */
        /* }; */
    };

    behaviors {
        tdc: tap_dance_copy_cut {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(C)>, <&kp LC(X)>;
        };
        tdp: tap_dance_paste_select {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(V)>, <&kp LC(A)>;
        };
        fht: fast_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        mht: medium_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-on-release;
        };
        slht: slow_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        sht: sticky_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&sk>;
        };
        lmd: layer_modifier {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
        };
        // tilesc: tilde_escape {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&kp ESC>, <&kp TILDE>;
        //     mods = <(MOD_LSFT|MOD_RSFT)>;
        // };
        // bacdel: back_del {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&kp BACKSPACE>, <&kp DELETE>;
        //     mods = <(MOD_LSFT|MOD_RSFT)>;
        // };
        // tdhome: tap_dance_home {
        //     compatible = "zmk,behavior-tap-dance";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <200>;
        //     bindings = <&kp HOME>, <&kp LS(HOME)>;
        // };
        // tdend: tap_dance_end {
        //     compatible = "zmk,behavior-tap-dance";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <200>;
        //     bindings = <&kp END>, <&kp RS(END)>;
        // };
        // tdqwert: tap_dance_qwerty {
        //     compatible = "zmk,behavior-tap-dance";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <180>;
        //     bindings = <&kp LS(LGUI)>, <&tog LAYER_1>;
        // };
        /* lht: layer_hold_tap { */
        /*     compatible = "zmk,behavior-hold-tap"; */
        /*     #binding-cells = <2>; */
        /*     tapping-term-ms = <200>; */
        /*     quick-tap-ms = <100>; */
        /*     flavor = "hold-preferred"; */
        /*     bindings = <&mo>, <&tog>; */
        /* }; */
        /* hm: home_row_mod { */
        /*     compatible = "zmk,behavior-hold-tap"; */
        /*     #binding-cells = <2>; */
        /*     flavor = "balanced"; */
        /*     require-prior-idle-ms = <150>; */
        /*     tapping-term-ms = <280>; */
        /*     quick-tap-ms = <175>; */
        /*     bindings = <&kp>, <&kp>; */
        /* }; */
        // hml: home_row_mod_left {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     require-prior-idle-ms = <125>;
        //     tapping-term-ms = <280>;
        //     quick-tap-ms = <175>;
        //     bindings = <&kp>, <&kp>;
        //     hold-trigger-key-positions = <36 37 38 39>; // List of keys on the rigt side of the keyboard */
        //     hold-trigger-on-release;
        // };
        // hmr: home_row_mod_right {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     require-prior-idle-ms = <125>;
        //     tapping-term-ms = <280>;
        //     quick-tap-ms = <175>;
        //     bindings = <&kp>, <&kp>;
        //     hold-trigger-key-positions = <33 32 31 30>; // List of keys on the left side of the keyboard */
        //     hold-trigger-on-release;
        // };
    };

	keymap {
		compatible = "zmk,keymap";
		base {
			bindings = <
				&bootloader
				&slht F11 F10      &kp N1            &kp N2      &kp N3       &kp N4     &kp N5 &kp C_MUTE  &kp PSCRN  &kp N6   &kp N7         &kp N8     &kp N9      &kp N0       &kp RC(B)
				&slht LC(F7) F9    &kp Q             &kp W       &kp F        &kp P      &kp G  &tdc        &none      &kp J    &kp L          &kp U      &kp Y       &fht GRAVE APOS  &fht PIPE BSLH
				&slht LC(F12) F12  &kp A             &kp R       &kp S        &kp T      &kp D                         &kp H    &kp N          &kp E      &kp I       &kp O            &fht COLON SEMI
				&slht LS(F5) F5    &kp Z             &kp X       &kp C        &kp V      &kp B  &tdp        &none      &kp K    &kp M          &kp COMMA  &kp PERIOD  &kp SLASH        &kp EQUAL
				&kp LEFT           &kp DOWN          &kp UP      &kp RIGHT    &lmd MOUSE ESC                                &lmd SYM BSPC  &mo FUN    &kp RS(F2)  &kp RS(F3)       &kp RS(F4)
				
                                                                  &sht LALT LALT &sht LCTRL LCTRL              &sht RCTRL RCTRL   &sht RALT RALT
                                                &mht LSHFT SPACE  &lmd NAV TAB   &mo MEDIA                     &slht RC(RS(MINUS)) RC(MINUS)  &lmd NUM DEL &mht RSHFT RETURN
                                                                                 &fht LGUI LG(E)               &fht RGUI RG(I)
			>;
		};

		nav {
			bindings = <
                &bootloader
                &trans  &trans        &trans        &trans            &trans          &trans  &trans       &trans  &trans      &trans       &trans       &trans     &trans      &trans
                &trans  &trans        &trans        &trans            &trans          &trans  &trans       &trans  &trans      &trans       &trans       &trans     &trans  &trans
                &trans  &kp LGUI      &kp LALT      &kp LCTRL         &kp LSHFT       &trans                       &kp CAPS    &kp LEFT     &kp DOWN     &kp UP     &kp RIGHT   &trans
                &trans  &trans        &trans        &trans            &trans          &trans  &trans       &trans  &kp INSERT  &kp HOME     &kp PG_DN    &kp PG_UP  &kp END     &trans
                &trans  &trans        &trans        &trans            &trans                                                   &trans      &trans       &trans     &trans      &trans

                                                        &trans  &trans       &trans  &trans
                                                &trans  &trans  &trans       &trans  &trans  &trans
                                                                &trans       &trans
			>;
		};

		mouse {
			bindings = <
                &bootloader
                &trans  &trans        &trans        &trans            &trans          &trans  &trans       &trans  &trans      &trans          &trans          &trans        &trans           &trans
                &trans  &trans        &trans        &trans            &trans          &trans  &trans       &trans  &kp RC(RS(Z))  &kp RC(V)     &kp RC(C)      &kp RC(X)     &kp RC(Z)       &trans
                &trans  &kp LGUI      &kp LALT      &kp LCTRL         &kp LSHFT       &trans                       &kp RC(A)      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
                &trans  &trans        &trans        &trans            &trans          &trans  &trans       &trans  &trans      &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
                &trans  &trans        &trans        &trans            &trans                                                   &mkp MCLK       &trans          &trans        &trans           &trans

                                                        &trans  &trans       &trans  &trans
                                                &trans  &trans  &trans       &trans  &mkp RCLK  &mkp LCLK
                                                                &trans       &trans
			>;
		};

		media {
			bindings = <
                &bootloader
                &trans  &trans        &trans        &trans            &trans          &trans  &trans       &trans  &trans  &trans      &trans          &trans        &trans      &trans
                &trans  &trans        &trans        &trans            &trans          &trans  &trans       &trans  &trans  &trans      &trans          &trans        &trans      &trans
                &trans  &kp LGUI      &kp LALT      &kp LCTRL         &kp LSHFT       &trans                       &trans  &kp C_PREV  &kp C_VOL_DN    &kp C_VOL_UP  &kp C_NEXT  &trans
                &trans  &trans        &trans        &trans            &trans          &trans  &trans       &trans  &trans  &kp C_PP    &trans          &trans        &trans      &trans
                &trans  &trans        &trans        &trans            &trans                                               &kp PSCRN      &trans          &trans        &trans      &trans

                                                        &trans  &trans       &trans  &trans
                                                &trans  &trans  &trans       &trans  &trans  &trans
                                                                &trans       &trans
			>;
		};

		num {
			bindings = <
                &bootloader
                &trans  &trans     &trans  &trans  &trans  &trans    &trans       &trans  &trans  &trans     &trans     &trans    &trans   &trans
                &trans  &kp SLASH  &kp N7  &kp N8  &kp N9  &kp PLUS  &trans       &trans  &trans  &trans     &trans     &trans    &trans   &trans
                &trans  &kp STAR   &kp N4  &kp N5  &kp N6  &kp MINUS                      &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI &trans
                &trans  &kp DOT    &kp N1  &kp N2  &kp N3  &kp EQUAL &trans       &trans  &trans  &trans     &trans     &trans    &trans   &trans
                &trans  &trans     &trans  &trans  &kp N0                                         &trans     &trans     &trans    &trans   &trans

                                                           &trans   &trans       &trans  &trans
                                                &trans  &trans  &trans       &trans  &trans  &trans
                                                                    &trans       &trans
			>;
		};

		sym {
			bindings = <
                &bootloader
                &trans  &trans     &trans    &trans     &trans     &trans    &trans       &trans  &trans  &trans     &trans     &trans    &trans   &trans 
                &trans  &kp LBKT   &kp AMPS  &kp STAR   &kp EQUAL  &kp RBKT  &kp GT       &trans  &trans  &trans     &trans     &trans    &trans   &trans 
                &trans  &kp LBRC   &kp DLLR  &kp PRCNT  &kp CARET  &kp RBRC                       &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI &trans 
                &trans  &kp LPAR   &kp EXCL  &kp AT     &kp HASH   &kp RPAR  &kp LT       &trans  &trans  &trans     &trans     &trans    &trans   &trans 
                &trans  &trans     &trans    &trans     &kp UNDER                                         &trans     &trans     &trans    &trans   &trans

                                                          &trans     &trans       &trans  &trans
                                                &kp PLUS  &kp MINUS  &trans       &trans  &trans  &trans
                                                                     &kp QMARK    &trans
			>;
		};

		fun {
			bindings = <
                &bootloader
                &trans  &trans  &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans     &trans     &trans    &trans   &trans  
                &trans  &kp F12  &kp F7  &kp F8  &kp F9 &trans  &trans       &trans  &trans  &trans     &trans     &trans    &trans   &trans  
                &trans  &kp F11  &kp F4  &kp F5  &kp F6 &trans                       &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI &trans  
                &trans  &kp F10  &kp F1  &kp F2  &kp F3 &trans  &trans       &trans  &trans  &trans     &trans     &trans    &trans   &trans  
                &trans  &trans   &trans  &trans  &trans                                      &trans     &trans     &trans    &trans   &trans  

                                                        &trans  &trans       &trans  &trans
                                                &trans  &trans  &trans       &trans  &trans  &trans
                                                                &trans       &trans
			>;
		};
	};
};
