#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1400
#define LAYER_0 0
#define LAYER_1 1
#define LAYER_2 2
#define LAYER_3 3

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
combos {
    compatible = "zmk,combos";

    // Left Side Combos
    combo_left_ctrl {
        timeout-ms = <50>;
        key-positions = <33 32>; // F + D
        bindings = <&sht LEFT_CONTROL LC(LEFT_ALT)>;
    };
    combo_left_alt {
        timeout-ms = <50>;
        key-positions = <34 33>; // G + F
        bindings = <&kp LEFT_ALT>;
    };
    combo_left_return {
        timeout-ms = <50>;
        key-positions = <33 32 31>; // F + D + S
        bindings = <&kp RETURN>;
    };
    combo_left_backspace {
        timeout-ms = <50>;
        key-positions = <16 17>; // W + Q
        bindings = <&bacdel>;
    };
    combo_left_layer_two {
        timeout-ms = <50>;
        key-positions = <33 46>; // F + B
        bindings = <&tog LAYER_2>;
    };
    combo_left_layer_three {
        timeout-ms = <50>;
        key-positions = <32 45>; // D + V
        bindings = <&tog LAYER_3>;
    };

    // Right Side Combos
    combo_right_ctrl {
        timeout-ms = <50>;
        key-positions = <36 37>; // J + K
        bindings = <&sht RIGHT_CONTROL RC(RIGHT_ALT)>;
    };
    combo_right_alt {
        timeout-ms = <50>;
        key-positions = <35 36>; // H + J
        bindings = <&kp RIGHT_ALT>;
    };
    combo_right_space {
        timeout-ms = <50>;
        key-positions = <49 50>; // N + M
        bindings = <&kp SPACE>;
    };
    combo_right_layer_one {
        timeout-ms = <50>;
        key-positions = <36 49>; // J + N
        bindings = <&tog LAYER_2>;
    };
    combo_right_layer_three {
        timeout-ms = <50>;
        key-positions = <37 50>; // K + M
        bindings = <&tog LAYER_3>;
    };
};
  behaviors {
    tilesc: tilde_escape {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp ESC>, <&kp TILDE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    bacdel: back_del {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp BACKSPACE>, <&kp DELETE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    fht: fast_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = <180>;
        quick-tap-ms = <0>;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
    };
    sht: sticky_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = <180>;
        quick-tap-ms = <0>;
        flavor = "balanced";
        bindings = <&kp>, <&sk>;
    };
    lmd: layer_modifier {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <0>;
        flavor = "balanced";
        bindings = <&mo>, <&kp>;
    };
    tdhome: tap_dance_home {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp HOME>, <&kp LS(HOME)>;
    };
    tdend: tap_dance_end {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp END>, <&kp RS(END)>;
    };
    tdc: tap_dance_copy_cut {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp LC(LS(TAB))>, <&kp LC(C)>, <&kp LC(X)>;
    };
    tdp: tap_dance_paste {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp LC(TAB)>, <&kp LC(V)>;
    };
    // slht: slow_hold_tap {
    //     compatible = "zmk,behavior-hold-tap";
    //     #binding-cells = <2>;
    //     tapping-term-ms = <250>;
    //     quick-tap-ms = <0>;
    //     flavor = "balanced";
    //     bindings = <&kp>, <&kp>;
    // };
    // lht: layer_hold_tap {
    //     compatible = "zmk,behavior-hold-tap";
    //     #binding-cells = <2>;
    //     tapping-term-ms = <200>;
    //     quick-tap-ms = <0>;
    //     flavor = "balanced";
    //     bindings = <&mo>, <&tog>;
    // };
    // tdl1: tap_dance_layer_one {
    //     compatible = "zmk,behavior-tap-dance";
    //     #binding-cells = <0>;
    //     tapping-term-ms = <200>;
    //     bindings = <&mo LAYER_1>, <&tog LAYER_1>;
    // };
    // tdl2: tap_dance_layer_two {
    //     compatible = "zmk,behavior-tap-dance";
    //     #binding-cells = <0>;
    //     tapping-term-ms = <200>;
    //     bindings = <&mo LAYER_1>, <&tog LAYER_1>;
    // };
    // tdla: tap_dance_left_alt_layer {
    //     compatible = "zmk,behavior-tap-dance";
    //     #binding-cells = <0>;
    //     tapping-term-ms = <200>;
    //     bindings = <&kp LEFT_ALT>, <&tog LAYER_3>;
    // };
    // tdra: tap_dance_right_alt_layer {
    //     compatible = "zmk,behavior-tap-dance";
    //     #binding-cells = <0>;
    //     tapping-term-ms = <200>;
    //     bindings = <&kp RIGHT_ALT>, <&tog LAYER_3>;
    // };
  };
	keymap {
		compatible = "zmk,keymap";
		layer_0 {
			bindings = <
				&bootloader
				&tilesc          &kp NUMBER_1           &kp NUMBER_2            &kp NUMBER_3    &kp NUMBER_4    &kp NUMBER_5   &kp C_MUTE       &kp PRINTSCREEN &kp NUMBER_6    &kp NUMBER_7   &kp NUMBER_8 &kp NUMBER_9       &kp NUMBER_0        &bacdel
				&kp TAB          &kp Q                  &kp W                   &kp F           &kp P           &kp G          &kp PG_DN        &kp PG_UP       &kp J           &kp L          &kp U        &kp Y              &kp SEMICOLON       &kp BACKSLASH
				&kp CAPSLOCK     &kp A                  &kp R                   &kp S           &kp T           &kp D                                           &kp H           &kp N          &kp E        &kp I              &kp O               &kp RIGHT_GUI
				&kp LC(B)        &kp Z                  &kp X                   &kp C           &lmd LAYER_3 V  &lmd LAYER_2 B &tdhome          &tdend          &lmd LAYER_2 K  &lmd LAYER_3 M &kp COMMA    &kp PERIOD         &kp SLASH           &fht GRAVE SINGLE_QUOTE 
				&kp LS(LEFT_GUI) &kp LC(LS(LEFT_ARROW)) &kp RC(RS(RIGHT_ARROW)) &kp LEFT_ARROW  &kp RIGHT_ARROW                                                                 &kp DOWN_ARROW &kp UP_ARROW &kp RC(LEFT_ARROW) &kp RC(RIGHT_ARROW) &kp RS(RIGHT_GUI)
				
				                                                                                               &tdc           &tdp                            &kp RG(G) &kp RG(SEMICOLON)
				                                                                               &kp SPACE       &kp LEFT_SHIFT &tog LAYER_1                   &tog LAYER_1             &kp RIGHT_SHIFT &kp RETURN
				                                                                                                              &sk LC(LEFT_SHIFT)             &sk RC(RIGHT_SHIFT)
			>;
		};
		layer_1 {
			bindings = <
				&bootloader
				&trans &trans        &trans &trans     &trans    &trans &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &kp Q                  &kp W                   &kp E          &kp R           &kp T &trans &trans     &kp Y           &kp U          &kp I        &kp O              &kp P          &trans
				&trans &kp A                  &kp S                   &kp D          &kp F           &kp G                   &kp H           &kp J          &kp K        &kp L              &kp SEMICOLON  &trans
				&trans &kp Z                  &kp X                   &kp C          &kp V           &kp B     &trans &trans &kp N           &kp M          &kp COMMA    &kp PERIOD         &kp SLASH      &trans
				&trans &trans &trans &trans    &trans                                        &trans &trans &trans &trans &trans
				                                          &trans        &trans &trans &trans
				                               &trans     &trans        &trans &trans &trans &trans
				                                                        &trans &trans
			>;
		};
		layer_2 {
			bindings = <
				&bootloader
				&trans    &kp F1         &kp F2         &kp F3          &kp F4 &kp F5 &kp F6      &kp F7        &kp F8       &kp F9       &kp F10      &kp F11           &kp F12         &trans
				&trans    &msc SCRL_DOWN &mmv MOVE_UP   &msc SCRL_UP    &trans &trans &trans      &trans &kp NUMBER_7 &kp NUMBER_8 &kp NUMBER_9 &kp ASTERISK &kp EQUAL          &trans
				&trans    &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &trans &trans                           &kp NUMBER_4 &kp NUMBER_5 &kp NUMBER_6 &kp MINUS    &kp PLUS          &trans
				&trans    &msc SCRL_LEFT &trans         &msc SCRL_RIGHT &trans &trans &trans    &trans       &kp NUMBER_1 &kp NUMBER_2 &kp NUMBER_3 &trans       &trans          &trans
				&trans    &trans         &trans         &mkp RCLK       &mkp LCLK                                               &kp NUMBER_0 &trans   &kp C_VOLUME_DOWN &kp C_VOLUME_UP &trans
				                                                               &trans &trans      &trans        &trans
				                                                        &trans &trans &trans      &trans        &trans       &trans
				                                                                      &trans      &trans
			>;
		};
		layer_3 {
			bindings = <
				&bootloader
				&trans &trans           &trans               &trans               &trans    &trans         &trans    &trans      &trans         &trans         &trans       &trans          &trans &trans
				&trans &kp EXCL         &kp AT               &kp HASH             &kp DLLR  &kp PRCNT      &trans    &trans      &kp CARET &kp AMPS      &kp ASTERISK          &trans         &trans       &trans
				&trans &kp LEFT_BRACKET &kp LS(LEFT_BRACKET) &kp LEFT_PARENTHESIS &kp EQUAL &kp PLUS      &kp MINUS &kp UNDERSCORE &kp RIGHT_PARENTHESIS &kp RS(RIGHT_BRACKET) &kp RIGHT_BRACKET &trans
				&trans &trans &trans &trans &trans &trans          &trans       &trans &trans         &trans         &trans       &trans          &trans &trans
				&trans &trans &trans &trans &trans                                                         &trans         &trans       &trans          &trans &trans
				                                   &trans &trans    &trans   &trans
				                            &kp F9 &kp F5          &trans       &trans      &kp F10        &kp F11
				                                                   &trans       &trans
			>;
		};
	};
};
